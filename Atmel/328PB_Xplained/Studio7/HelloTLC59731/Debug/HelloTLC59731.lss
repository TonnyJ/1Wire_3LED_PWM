
HelloTLC59731.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048f  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000194  00000000  00000000  0000075f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b8  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d8  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f0  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  c4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <setHigh>:
#define T_CYCLE_0 4u // time to wait for the cycle to complete (before the next bit can be sent) if a 0 was send (4 units)
#define T_CYCLE_1 1u // time to wait for the cycle to complete (before the next bit can be sent) if a 1 was send (1 unit)

void setHigh()
{
	PORT |= (1<<PIN);  // set the pin bit for port
  cc:	2c 9a       	sbi	0x05, 4	; 5
  ce:	08 95       	ret

000000d0 <setLow>:
}

void setLow()
{
	PORT &= ~(1<<PIN); // clear the pin bit for port
  d0:	2c 98       	cbi	0x05, 4	; 5
  d2:	08 95       	ret

000000d4 <sendBit>:
}

void sendBit(uint8_t bit)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	// start next cycle
	setHigh();
  d8:	0e 94 66 00 	call	0xcc	; 0xcc <setHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <sendBit+0xa>
  e2:	00 00       	nop
	_delay_us(DELAY); // the pulse on the wire does not really have a width of 1us, since the write operation needs time too
	setLow();
  e4:	0e 94 68 00 	call	0xd0	; 0xd0 <setLow>
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <sendBit+0x16>
  ee:	00 00       	nop
	_delay_us(DELAY);
	
	if(bit)
  f0:	cc 23       	and	r28, r28
  f2:	69 f0       	breq	.+26     	; 0x10e <sendBit+0x3a>
	{   // write "1" data bit
		setHigh();
  f4:	0e 94 66 00 	call	0xcc	; 0xcc <setHigh>
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <sendBit+0x26>
  fe:	00 00       	nop
		_delay_us(DELAY); // Bit 29 is a 1
		setLow();
 100:	0e 94 68 00 	call	0xd0	; 0xd0 <setLow>
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <sendBit+0x32>
 10a:	00 00       	nop
 10c:	04 c0       	rjmp	.+8      	; 0x116 <sendBit+0x42>
 10e:	85 e1       	ldi	r24, 0x15	; 21
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <sendBit+0x3c>
 114:	00 00       	nop
	}
	else
	{   // for "0" data bit simply let timeout the cycle
		_delay_us(T_CYCLE_0);
	}
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <sendByte>:

void sendByte(uint8_t byte)
{
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
	sendBit(byte & (1<<7));
 11e:	80 78       	andi	r24, 0x80	; 128
 120:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<6));
 124:	8c 2f       	mov	r24, r28
 126:	80 74       	andi	r24, 0x40	; 64
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<5));
 12c:	8c 2f       	mov	r24, r28
 12e:	80 72       	andi	r24, 0x20	; 32
 130:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<4));
 134:	8c 2f       	mov	r24, r28
 136:	80 71       	andi	r24, 0x10	; 16
 138:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<3));
 13c:	8c 2f       	mov	r24, r28
 13e:	88 70       	andi	r24, 0x08	; 8
 140:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<2));
 144:	8c 2f       	mov	r24, r28
 146:	84 70       	andi	r24, 0x04	; 4
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<1));
 14c:	8c 2f       	mov	r24, r28
 14e:	82 70       	andi	r24, 0x02	; 2
 150:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
	sendBit(byte & (1<<0));
 154:	8c 2f       	mov	r24, r28
 156:	81 70       	andi	r24, 0x01	; 1
 158:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendBit>
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <init>:

void init()
{	
	DDR |= (1<<PIN); // set port pin to output
 160:	24 9a       	sbi	0x04, 4	; 4
 162:	08 95       	ret

00000164 <main>:
}

int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x8>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	init();
 170:	0e 94 b0 00 	call	0x160	; 0x160 <init>
	
    uint8_t on  = 1;  // 0 = all off, 1 = all on
        
    //                         0x3A (GS write) , 3x 8bit LED value
    //  uint8_t all_on[32]  = {0,0,1,1,1,0,1,0 , 1,0,0,0,0,0,0,1 , 1,0,0,0,0,0,0,1 , 1,0,0,0,0,0,0,1 };
    uint8_t all_on[4]   = {0x3A, 0x81, 0x81, 0x81};
 174:	8a e3       	ldi	r24, 0x3A	; 58
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	81 e8       	ldi	r24, 0x81	; 129
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	8b 83       	std	Y+3, r24	; 0x03
 17e:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t idx = 0;
    uint8_t val = 0;
        
    // establish the cycle time,
    // by writing the 1st SID Rising Edge (see data sheet)
    setHigh();
 180:	0e 94 66 00 	call	0xcc	; 0xcc <setHigh>
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x22>
 18a:	00 00       	nop
    _delay_us(DELAY);
    setLow();
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <setLow>
 190:	e5 e0       	ldi	r30, 0x05	; 5
 192:	ea 95       	dec	r30
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x2e>
 196:	00 00       	nop
 198:	f5 e1       	ldi	r31, 0x15	; 21
 19a:	fa 95       	dec	r31
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x36>
 19e:	00 00       	nop
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	7e 01       	movw	r14, r28
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	e8 0e       	add	r14, r24
 1ac:	f1 1c       	adc	r15, r1
        
    // write the field values
    for (idx = 0; idx < 4; idx++)
    {
	    val = on ? all_on[idx] : all_off[idx];
	    sendByte(val);
 1ae:	f8 01       	movw	r30, r16
 1b0:	81 91       	ld	r24, Z+
 1b2:	8f 01       	movw	r16, r30
 1b4:	0e 94 8d 00 	call	0x11a	; 0x11a <sendByte>
    setLow();
    _delay_us(DELAY);
    _delay_us(T_CYCLE_0);
        
    // write the field values
    for (idx = 0; idx < 4; idx++)
 1b8:	0e 15       	cp	r16, r14
 1ba:	1f 05       	cpc	r17, r15
 1bc:	c1 f7       	brne	.-16     	; 0x1ae <main+0x4a>
    }

	while (1) 
    {
		// nothing to do
    }
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x5a>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
